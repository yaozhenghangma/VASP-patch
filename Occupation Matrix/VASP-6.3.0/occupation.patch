--- src/main.orig.F	2022-09-17 12:03:47.081633575 +0800
+++ src/main.F	2022-09-17 12:05:27.146572602 +0800
@@ -844,7 +844,7 @@
       ENDIF
 
       IF (USELDApU().OR.LCALC_ORBITAL_MOMENT()) &
-     &   CALL INITIALIZE_LDAU(T_INFO%NIONS,T_INFO%NTYP,P,WDES%LNONCOLLINEAR,IO%IU0,IO%IDIOT)
+     &   CALL INITIALIZE_LDAU(T_INFO%NIONS,T_INFO%NTYP,P,WDES%LNONCOLLINEAR,IO%IU5,IO%IU6,IO%IU0,IO%IDIOT)
 
       CALL SET_PAW_AUG(T_INFO%NTYP, P, IO%IU6, LMAX_CALC, LCOMPAT)
 !-----------------------------------------------------------------------
--- src/LDApU.orig.F	2022-09-17 12:04:00.169494807 +0800
+++ src/LDApU.F	2022-09-17 12:17:54.507648246 +0800
@@ -38,6 +38,12 @@
       REAL(q), PRIVATE, ALLOCATABLE, SAVE :: ORBMOM(:,:,:)    ! Stores l- and site- resolved orbital moments
 
       COMPLEX(q), PRIVATE, SAVE :: V(7,7,7,7)
+      ! GWW - input occupation matrix
+      OVERLAP, PRIVATE, ALLOCATABLE, SAVE :: OCC_MAT_INPUT(:,:,:,:)
+      INTEGER, PRIVATE, ALLOCATABLE, SAVE :: ATOM_OCC(:)
+      INTEGER, PRIVATE, ALLOCATABLE, SAVE :: ATOM_L(:)
+      INTEGER, PRIVATE, SAVE :: OCC_NATOMS, OCC_PNATOMS
+      ! END GWW
         
       CONTAINS
 
@@ -117,8 +123,9 @@
 !
 !***********************************************************************
 
-      SUBROUTINE INITIALIZE_LDAU(NIONS,NTYP,P,LNONCOLLINEAR,IU,IDIOT)
-      
+      ! GWW - change for occupation matrix
+      SUBROUTINE INITIALIZE_LDAU(NIONS,NTYP,P,LNONCOLLINEAR,IU5,IU6,IU,IDIOT)
+
       USE pseudo
       USE tutor, ONLY: vtutor, isError, NoLDAU
       
@@ -137,8 +144,30 @@
       COMPLEX(q) CDUM
       LOGICAL LDUM
 
+      !GWW occupation matrix - for the I/O
+      INTEGER, PARAMETER :: NDIM=500
+      INTEGER :: IU5,IU6
+      INTEGER :: N, IERR, ITMP
+      LOGICAL :: LOPEN
+      CHARACTER (1) :: CHARAC
+      REAL(q) :: FTMP(NDIM)
+      !GWW for occupation matrix
+      INTEGER :: NUM_ORB
+      INTEGER :: START
+      INTEGER :: occ_spin
+      INTEGER :: i, ii, j, jj, i1, i2, is
+      CHARACTER (10)  ::  Keyword
+      CHARACTER (3)  ::  keynum
+      character (100) ::  occ_format
+      !GWW
+
       NCDIJ=2; IF (LNONCOLLINEAR) NCDIJ=4
 
+      !GWW - occupation matrix - for reading INCAR
+      LOPEN=.FALSE.
+      OPEN(UNIT=IU5,FILE='INCAR',STATUS='OLD')
+      !GWW
+
 !=======================================================================
 !  Sanity check: L(S)DA+U only implemented for PAW potentials
 !=======================================================================
@@ -172,6 +201,151 @@
          ALLOCATE(ORBMOM(MAX(1,LMAX_),3,NIONS))
          ORBMOM=0._q
       ENDIF
+
+      !----------------------------------------------------------------------
+      ! GWW - input of occupation matrix
+      ALLOCATE(OCC_MAT_INPUT(16,16,NCDIJ,NIONS))
+#ifdef realmode
+      OCC_MAT_INPUT=0._q
+#else
+      OCC_MAT_INPUT=(0._q,0_q )
+#endif
+      ALLOCATE(ATOM_OCC(NIONS),ATOM_L(NIONS))
+
+      ! matrix input from external file OCCMATRIX
+      CALL RDATAB(LOPEN,'INCAR',IU5,'OCCEXT','=','#',';','I', &
+      &   ITMP,RDUM,CDUM,LDUM,CHARAC,N,1,IERR)
+
+      if ((IERR/=0) .AND. (IERR/=3)) THEN
+         WRITE(IU6,*) " "
+         WRITE(IU6,'(" Error in OCCEXT format. Format is in the occupation matrix documentation")')
+         WRITE(IU6,*) " "
+         WRITE(IU6,*) " "
+         stop
+      endif
+
+      if (ITMP==1.and.IERR==0) then
+         if (IU6>0)  then
+            WRITE(IU6,*) " "
+            WRITE(IU6,'(" OCCEXT found - reading occupation matrix from external file OCCMATRIX")')
+            WRITE(IU6,*) " "
+         endif
+
+         open(unit=999,file='OCCMATRIX',status='OLD')
+
+         read(999,*) occ_natoms
+
+         do i=1,occ_natoms
+            read(999,*) atom_occ(i), atom_l(i), occ_spin
+            ! calculate start point in matrix from summing the number of orbitals for
+            ! angular momentum less that that of interest
+            NUM_ORB     = 2*ATOM_L(i)+1
+            START = 0
+            do ii = ATOM_L(i)-1, 0, -1
+               START = START + 2*ii+1
+            enddo
+            START = START+1
+
+            ! real occupation matrix only (occ_spin 1 or 2)
+            if (occ_spin<=2) then
+               do is = 1, occ_spin
+                  read(999,*)
+                  do i1 = start, start+num_orb-1
+                     read(999,*) (FTMP(i2), i2=start, start+num_orb-1 )
+
+#ifdef realmode
+                     do i2 = start, start+num_orb-1
+                        OCC_MAT_INPUT(i1,i2,is,ATOM_OCC(i))=FTMP(i2)
+                     enddo
+#else
+                     do i2 = start, start+num_orb-1
+                        OCC_MAT_INPUT(i1,i2,is,ATOM_OCC(i))=CMPLX (FTMP(i2), 0, q)
+                     enddo
+#endif
+                  enddo
+
+               enddo
+            endif
+
+            ! spin orbit occupation matrix (occ_spin 4)
+            if(occ_spin==4) then
+#ifdef realmode
+               WRITE(IU6,*) " "
+               WRITE(IU6,'(" Non-Collinear occupation matrix - vasp_ncl")')
+               WRITE(IU6,*) " "
+               stop
+#else
+               do is = 1, occ_spin ! read 4 matrices for the noncollinear real and imaginary components.
+                  read(999,*)
+                  do i1 = start, start+num_orb-1
+                     read(999,*) (FTMP(i2), i2=start, start+2*num_orb-1 )
+                     do i2 = start, start+num_orb-1
+                        OCC_MAT_INPUT(i1,i2,is,ATOM_OCC(i))=CMPLX (FTMP(i2), FTMP(i2+num_orb), q)
+                     enddo
+                  enddo
+               enddo
+#endif
+            endif
+
+            read(999,*)
+         enddo
+      endif
+! end of matrix input
+
+!-----------------------------------
+! write out occupation matrices - first spin up then spin down
+      if (IU6>0) THEN
+         WRITE(IU6,*) " "
+         WRITE(IU6,*) "Occupation matrix control coded by Prof. Graeme Watson "
+         WRITE(IU6,*) "at Trinity College Dublin"
+         WRITE(IU6,*) " "
+         WRITE(IU6,*) "Occupation set for the following atoms "
+         WRITE(IU6,*) " "
+
+         ! calculate start point in matrix from summing the number of orbitals for
+         ! angular momentum less that that of interest
+         do ii = 1,OCC_NATOMS
+            NUM_ORB = 2*ATOM_L(ii)+1
+            START = 0
+            do i1 = ATOM_L(ii)-1, 0, -1
+               START = START + 2*i1+1
+            enddo
+            START = START+1
+
+            ! Loop over spins
+            do i2 = 1, NCDIJ
+               WRITE(IU6,*) " "
+               WRITE(IU6,*) "ATOM ",ATOM_OCC(ii)," Spin ", i2
+
+#ifdef realmode
+               write (occ_format, '(a,I2,a)') '(4X,',num_orb,'(3X,I2,3X))'
+               WRITE(IU6,occ_format) (j, j=start,start+num_orb-1)
+
+               write (occ_format, '(a,I2,a,I2,a)') '(I2,2X,',num_orb,'(F7.4,X),2X,I2)'
+               do i = start, start+num_orb-1
+                  WRITE(IU6,occ_format) i,  &
+                     & (OCC_MAT_INPUT(i,j,i2,ATOM_OCC(ii)), j=start,start+num_orb-1) ,i
+               enddo
+#else
+               write (occ_format, '(a,I2,a,I2,a)') '(4X,',num_orb,'(3X,I2,3X),6X,',num_orb,'(3X,I2,3X))'
+               WRITE(IU6,occ_format) (j, j=start,start+num_orb-1),(jj, jj=start,start+num_orb-1)
+
+               write (occ_format, '(a,I2,a,I2,a)') '(I2,2X,',num_orb,'(F7.4,X),2X,I2,2X,',num_orb,'(F7.4,X),2X,I2))'
+               do i = start, start+num_orb-1
+                  WRITE(IU6,occ_format) i,  &
+                     & ( real( OCC_MAT_INPUT(i,j,i2,ATOM_OCC(ii)) ), j=start,start+num_orb-1) ,i, &
+                     & (aimag( OCC_MAT_INPUT(i,j,i2,ATOM_OCC(ii)) ), j=start,start+num_orb-1) ,i
+               enddo
+
+#endif
+            enddo
+         enddo
+      endif
+      ! Close INCAR
+      close(IU5)
+! END GWW
+!-----------------------------------------------------------------------------------------------------
+
       
       RETURN 
       END SUBROUTINE INITIALIZE_LDAU 
@@ -320,6 +494,10 @@
       INTEGER ISP,LN1,LN2,LMN1,LMN2,L1,L2,M1,M2,LM1,LM2
       INTEGER LNMAX,LMMAX
 
+      !GWW
+      INTEGER :: I, I2, II, jj, START
+      !GWW END
+
       DBLE_LDAU=0._q
 
       IF (PRINTOCC/=0) OCC_MAT_ALL(:,:,:,IATOM)=0._q
@@ -377,6 +555,24 @@
 !!!     ENDIF
 !!! test_
 
+      ! GWW Set Occupation Matrix for Atoms input
+      do i = 1,OCC_NATOMS
+         if (ATOM_OCC(i)/=IATOM) CYCLE
+         START = 0
+         do ii = ATOM_L(i)-1, 0, -1
+            START = START + 2*ii+1
+         enddo
+         START = START+1
+         do ii = START, START + ATOM_L(i)*2
+            do jj = START, START + ATOM_L(i)*2
+               do i2 = 1, NCDIJ
+                 OCC_MAT(ii,jj,i2)=OCC_MAT_INPUT(ii,jj,i2,ATOM_OCC(i))
+               enddo
+            enddo
+         enddo
+      enddo
+      ! GWW
+
       IF (PRINTOCC/=0) OCC_MAT_ALL(1:LMMAX,1:LMMAX,1:NCDIJ,IATOM)=OCC_MAT(1:LMMAX,1:LMMAX,1:NCDIJ)
       
 !==============================================================
